// Functions
// -----------------------------------------------------------------------------------------

@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function spacer($key) {

	@if map-has-key($spacers, $key) {
		@return map-get($spacers, $key);
	}

	@warn "Unknown `#{$key}` in $spacers.";
	@return null;
}

@function add($value1, $value2, $return-calc: true) {
	@if $value1 == null {
		@return $value2;
	}

	@if $value2 == null {
		@return $value1;
	}

	@if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
		@return $value1 + $value2;
	}

	@return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
	@if $value1 == null and $value2 == null {
		@return null;
	}

	@if $value1 == null {
		@return -$value2;
	}

	@if $value2 == null {
		@return $value1;
	}

	@if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
		@return $value1 - $value2;
	}

	@return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@function escape-svg($string) {
	@if str-index($string, "data:image/svg+xml") {
		@each $char, $encoded in $escaped-characters {
			// Do not escape the url brackets
			@if str-index($string, "url(") == 1 {
				$string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
			} @else {
				$string: str-replace($string, $char, $encoded);
			}
		}
	}

	@return $string;
}

@function opaque($background, $foreground) {
	@return mix(rgba($foreground, 1), $background, opacity($foreground) * 100);
}

@function tint-color($color, $weight) {
	@return mix(white, $color, $weight);
}

@function shade-color($color, $weight) {
	@return mix(black, $color, $weight);
}

@function shift-color($color, $weight) {
	@return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

@function section-vars($key: 'general', $map: $section-styles) {

	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	}

	@warn "Unknown `#{$key}` in $map.";
	@return null;
}

@function section-var($key, $map: $section-style-map) {

	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	}

	@warn "Unknown `#{$key}` in $map.";
	@return null;
}

@function str-split($string, $separator) {

    $split-arr: ();
    $index : str-index($string, $separator);

    @while $index != null {
        $item: str-slice($string, 1, $index - 1);
        $split-arr: append($split-arr, $item);
        $string: str-slice($string, $index + 1);
        $index : str-index($string, $separator);
    }

    $split-arr: append($split-arr, $string);

    @return $split-arr;
}

@function to-number($value) {

	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		@warn 'Value for `to-number` should be a number or a string.';
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {

		$character: str-slice($value, $i, $i);

		@if (index(map-keys($numbers), $character) or $character == '.') {
			@if $character == '.' {
				$digits: 1;
			} @else if $digits == 0 {
				$result: $result * 10 + map-get($numbers, $character);
			} @else {
				$digits: $digits * 10;
				$result: $result + map-get($numbers, $character) / $digits;
			}
		}
	}

	@return if($minus, -$result, $result);
}